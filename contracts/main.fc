#include "imports/stdlib.fc";
#include "imports/ops.fc";
#include "imports/storage.fc";


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(balance, 32)
            .store_slice(admin_address)
        .end_cell()
    );
}


() load_data() impure inline {
    slice ds = get_data().begin_parse();
    balance = ds~load_uint(32);
    admin_address = ds~load_msg_addr();
    ds.end_parse();
    return ();
}


() send_empty_message(int amount, slice to, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
    .end_cell();
    send_raw_message(msg, mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    load_data();

    if (op == op::accept_funds) {
        throw_if(1000, msg_value < 100000000);
        if (msg_value < 2000000000) {
            send_empty_message(msg_value, sender, 1);
        } else {
            balance = balance + msg_value;
            save_data();
        }
        return ();
    }

    throw_unless(2000, equal_slices(sender, admin_address));
    if (op == op::admin_withdraw) {
        balance = balance + msg_value;
        save_data();
        int result = balance - 500000000;
        balance = balance - result;
        send_empty_message(result, admin_address, 1);
        save_data();
        return ();
    }
    throw(0xffff);
}
